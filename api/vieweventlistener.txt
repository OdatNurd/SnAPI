%hyperhelp title="sublime_plugin.ViewEventListener Class" date="2020-05-19"


# vieweventlistener:ViewEventListener Class
=========================

A class that provides similar event handling to |EventListener|, but bound to a
specific view. Provides class method-based filtering to control what views
objects are created for.

The view is passed as a single parameter to the constructor. The default
implementation makes the view available via `self.view`.

This class is contained in the |sublime_plugin| module.


## _none:Class Methods
----------------
*ViewEventListener.is_applicable*(settings)
  Returns: bool

    A `@classmethod` that receives a |Settings| object and should return a
    bool indicating if this class applies to a view with those settings


*ViewEventListener.applies_to_primary_view_only*()
  Returns: bool

    A `@classmethod` that should return a bool indicating if this class
    applies only to the primary view for a file. A view is considered primary
    if it is the only, or first, view into a file.


## _none:Methods
----------

*ViewEventListener.on_load*()  `[>=3155]`
  Returns: None

    Called when the file is finished loading.


*ViewEventListener.on_load_async*()  `[>=3155]`
  Returns: None

    Called when the file is finished loading. Runs in a separate thread, and
    does not block the application.


*ViewEventListener.on_reload*()  `[>=4050]`
  Returns: None

    Called when the file is reloaded.


*ViewEventListener.on_reload_async*()  `[>=4050]`
  Returns: None

    Called when the file is reloaded. Runs in a separate thread, and does not
    block the application.


*ViewEventListener.on_revert*()  `[>=4050]`
  Returns: None

    Called when the file is reverted.


*ViewEventListener.on_revert_async*()  `[>=4050]`
  Returns: None

    Called when the file is reverted. Runs in a separate thread, and does not
    block the application.


*ViewEventListener.on_pre_move*()  `[>=4050]`
  Returns: None

    Called right before a view is moved between two windows.


*ViewEventListener.on_post_move*()  `[>=4050]`
  Returns: None

    Called right after a view is moved between two windows.


*ViewEventListener.on_post_move_async*()  `[>=4050]`
  Returns: None

    Called right after a view is moved between two windows. Runs in a separate
    thread, and does not block the application.


*ViewEventListener.on_pre_close*()  `[>=3155]`
  Returns: None

    Called when a view is about to be closed. The view will still be in the
    window at this point.


*ViewEventListener.on_close*()  `[>=3155]`
  Returns: None

    Called when a view is closed (note, there may still be other views into the
    same buffer).


*ViewEventListener.on_pre_save*()  `[>=3155]`
  Returns: None

    Called just before a view is saved.


*ViewEventListener.on_pre_save_async*()  `[>=3155]`
  Returns: None

    Called just before a view is saved. Runs in a separate thread, and does not
    block the application.


*ViewEventListener.on_post_save*()  `[>=3155]`
  Returns: None

    Called after a view has been saved.


*ViewEventListener.on_post_save_async*()  `[>=3155]`
  Returns: None

    Called after a view has been saved. Runs in a separate thread, and does not
    block the application.


*ViewEventListener.on_modified*()
  Returns: None

    Called after changes have been made to the view.


*ViewEventListener.on_modified_async*()
  Returns: None

    Called after changes have been made to the view. Runs in a separate thread,
    and does not block the application.


*ViewEventListener.on_text_changed*([changes])  `[>=4050]`
  Returns: None

    Called once after changes has been made to a view, with detailed
    information about what has changed.

    `changes` is a list of `TextChange` objects.


*ViewEventListener.on_text_changed_async*([changes])  `[>=4050]`
  Returns: None

    Called once after changes has been made to a view, with detailed
    information about what has changed. Runs in a separate thread, and does not
    block the application.

    `changes` is a list of `TextChange` objects.


*ViewEventListener.on_selection_modified*()
  Returns: None

    Called after the selection has been modified in the view.


*ViewEventListener.on_selection_modified_async*()
  Returns: None

    Called after the selection has been modified in the view. Runs in a
    separate thread, and does not block the application.


*ViewEventListener.on_activated*()
  Returns: None

    Called when a view gains input focus.


*ViewEventListener.on_activated_async*()
  Returns: None

    Called when the view gains input focus. Runs in a separate thread, and does
    not block the application.


*ViewEventListener.on_deactivated*()
  Returns: None

    Called when the view loses input focus.


*ViewEventListener.on_deactivated_async*()
  Returns: None

    Called when the view loses input focus. Runs in a separate thread, and does
    not block the application.


*ViewEventListener.on_hover*(point, hover_zone)
  Returns: None

    Called when the user's mouse hovers over the view for a short period.

    point is the closest point in the view to the mouse location. The mouse may
    not actually be located adjacent based on the value of `hover_zone`:

    * `sublime.HOVER_TEXT`
      When the mouse is hovered over text.

    * `sublime.HOVER_GUTTER`
      When the mouse is hovered over the gutter.

    * `sublime.HOVER_MARGIN`
      When the mouse is hovered in whitespace to the right of a line.


*ViewEventListener.on_query_context*(key, operator, operand, match_all)
  Returns: bool or None

    Called when determining to trigger a key binding with the given context
    `key`. If the plugin knows how to respond to the context, it should return
    either `True` of `False`. If the context is unknown, it should return
    `None`.

    operator is one of:

    * `sublime.OP_EQUAL`
       Is the value of the context equal to the operand?

    * `sublime.OP_NOT_EQUAL`
      Is the value of the context not equal to the operand?

    * `sublime.OP_REGEX_MATCH`
      Does the value of the context match the regex given in operand?

    * `sublime.OP_NOT_REGEX_MATCH`
      Does the value of the context not match the regex given in operand?

    * `sublime.OP_REGEX_CONTAINS`
      Does the value of the context contain a substring matching the regex
      given in operand?

    * `sublime.OP_NOT_REGEX_CONTAINS`
      Does the value of the context not contain a substring matching the regex
      given in operand?

    `match_all` should be used if the context relates to the selections: does
    every selection have to match (`match_all == True`), or is at least one
    matching enough (`match_all == False`)?


*ViewEventListener.on_query_completions*(prefix, locations)
  Returns: None, list, tuple or |CompletionList|

    Called whenever completions are to be presented to the user. The `prefix`
    is a unicode string of the text to complete.

    `locations` is a list of |:point:points|. Since this method is called for all
    completions no matter the syntax, `view.match_selector(point,
    relevant_scope)` should be called to determine if the point is relevant.

    The return value must be one of the following formats:

    * `None`: no completions are provided

        ```python
        return None
        ```

    * A list of |completion| values

        ```python
        return [
            ["me1", "method1()"],
            ["me2", "method2()"]
        ]
        ```

    * A 2-element tuple with the first element being a list of |completion|
      values, and the second element being flags composed via bitwise OR of:

        * `sublime.INHIBIT_WORD_COMPLETIONS`
          prevent Sublime Text from showing completions based on the contents
          of the view

        * `sublime.INHIBIT_EXPLICIT_COMPLETIONS`
          prevent Sublime Text from showing completions based on
          `.sublime-completions` files

        * `sublime.DYNAMIC_COMPLETIONS`:  `[>=4057]`
          if completions should be re-queried as the user types

        * `sublime.INHIBIT_REORDER`  `[>=4074]`
            prevent Sublime Text from changing the completion order

          ```python
          return (
              [
                  ["me1", "method1()"],
                  ["me2", "method2()"]
              ],
              sublime.INHIBIT_WORD_COMPLETIONS |
              sublime.INHIBIT_EXPLICIT_COMPLETIONS
          )
          ```

    * A |CompletionList| object  `[>=4050]`

        ```python
        cl = sublime.CompletionList(flags=sublime.INHIBIT_WORD_COMPLETIONS)
        start_background_fetch(cl)
        return cl
        ```


*ViewEventListener.on_text_command*(command_name, args)
  Returns: (str, dict)

    Called when a text command is issued. The listener may return a `(command,
    arguments)` tuple to rewrite the command, or `None` to run the command
    unmodified.


*ViewEventListener.on_post_text_command*(command_name, args)
  Returns: None

    Called after a text command has been executed.


--------------------------------------------------------------------------------
Sublime Text Help Copyright Â© Sublime HQ Pty Ltd            |api_reference.html|