%hyperhelp title="sublime.View Class" date="2020-05-06"


# view:View Class
============

Represents a view into a text buffer. Note that multiple views may refer to the
same buffer, but they have their own unique selection and geometry.

This class is contained in the |sublime| module.


*view.__len__*()  `[UNDOCUMENTED]`
  Returns: int

    Returns the number of character in the file.


*view.__eq__*(rhs)  `[UNDOCUMENTED]`
  Returns: value

    Determines if `rhs` is a `view` that is associated with the same |:view.id:view.id()|
    or not (i.e. that it represents the same view).


*view.__bool__*()  `[UNDOCUMENTED]`
  Returns: bool

    Returns `True` if the |:view.id:view.id()| of this view is not 0 or `False`
    otherwise.


*view.id*()
  Returns: int

    Returns a number that uniquely identifies this view.


*view.buffer_id*()
  Returns: int

    Returns a number that uniquely identifies the buffer underlying this view.


*view.is_valid*()  `[UNDOCUMENTED]`
  Returns: bool

    Returns a boolean indicating if this view object is valid or not. A view
    becomes invalid if it is no longer attached to a buffer.


*view.is_primary*()
  Returns: bool

    If the view is the primary view into a file. Will only be `False` if the
    user has opened multiple views into a file.


*view.file_name*()
  Returns: str

    The full name file the file associated with the buffer, or `None` if it
    doesn't exist on disk.


*view.retarget*(new_file_name)  `[UNDOCUMENTED]`
  Returns: None

    Changes the file name associated with the view to the one passed in. All
    future save operations will be done using this file name.


*view.meta_info*(key, point)  `[UNDOCUMENTED]`
  Returns: value

    Obtain the metadata information (i.e. information stored in `tmPreferences`
    files) for the provided `key`. For metadata that is scoped, the scope at the
    `point` provided is used to determine which meta information to return.


*view.name*()
  Returns: str

    The name assigned to the buffer, if any


*view.set_name*(name)
  Returns: None

    Assigns a name to the buffer


*view.is_loading*()
  Returns: bool

    Returns `True` if the buffer is still loading from disk, and not ready for
    use.


*view.close*()  `[UNDOCUMENTED]`
  Returns: bool

    Attempts to close the current view, possibly prompting the user if they
    wish to throw away unsaved changes. A `bool` is returned that indicates if
    the view was actually closed or not.


*view.is_dirty*()
  Returns: bool

    Returns `True` if there are any unsaved modifications to the buffer.


*view.is_read_only*()
  Returns: bool

    Returns `True` if the buffer may not be modified.


*view.set_read_only*(read_only)
  Returns: None

    Sets the read only property on the buffer.


*view.is_scratch*()
  Returns: bool

    Returns `True` if the buffer is a scratch buffer. Scratch buffers never
    report as being dirty.


*view.set_scratch*(scratch)
  Returns: None

    Sets the scratch property on the buffer.


*view.settings*()
  Returns: |Settings|

    Returns a reference to the view's settings object. Any changes to this
    settings object will be private to this view.


*view.element*()  `[>=4050]`
  Returns: str or None

    Returns `None` for normal views, for views that comprise part of the UI, a
    `str` is returned from the following list:

    * `"console:input"`
      The console input

    * `"goto_anything:input"`
      The input for the Goto Anything

    * `"command_palette:input"`
      The input for the Command Palette

    * `"find:input"`
      The input for the Find panel

    * `"incremental_find:input"`
      The input for the Incremental Find panel

    * `"replace:input:find"`
      The Find input for the Replace panel

    * `"replace:input:replace"`
      The Replace input for the Replace panel

    * `"find_in_files:input:find"`
      The Find input for the Find in Files panel

    * `"find_in_files:input:location"`
      The Where input for the Find in Files panel

    * `"find_in_files:input:replace"`
      The Replace input for the Find in Files panel

    * `"find_in_files:output"`
      The output panel for Find in Files (buffer or output panel)

    * `"input:input"`
      The input for the Input panel

    * `"exec:output"`
      The output for the exec command

    * `"output:output"`
      A general output panel

    The console output, indexer status output and license input controls are
    not accessible via the API.


*view.window*()
  Returns: |Window|

    Returns a reference to the window containing the view.


*view.run_command*(cmd, <args>)
  Returns: None

    Runs the named |TextCommand| with the (optional) given `args`.


*view.size*()
  Returns: int

    Returns the number of character in the file.


*view.substr*(region)
  Returns: str

    Returns the contents of the `region` as a string.


*_none:view.substr*(point)
  Returns: str

    Returns the character to the right of the `point`.


*view.insert*(edit, point, text)
  Returns: int

    Inserts the given `string` in the buffer at the specified `point`. Returns
    the number of characters inserted: this may be different if tabs are being
    translated into spaces in the current buffer.


*view.erase*(edit, region)
  Returns: None

    Erases the contents of the `region` from the buffer.


*view.replace*(edit, region, text)
  Returns: None

    Replaces the contents of the `region` with the given `string`.


*view.sel*()
  Returns: |Selection|

    Returns a reference to the selection.


*view.has_non_empty_selection_region*()  `[UNDOCUMENTED]`
  Returns: bool

    Returns `True` if the `view` contains at least one `selection` with a
    length larger than `0`.


*view.line*(point)
  Returns: |Region|

    Returns the line that contains the `point`.


*_none:view.line*(region)
  Returns: |Region|

    Returns a modified copy of `region` such that it starts at the beginning of
    a line, and ends at the end of a line. Note that it may span several lines.


*view.full_line*(point)
  Returns: |Region|

    As `line()`, but the region includes the trailing newline character, if
    any.


*_none:view.full_line*(region)
  Returns: |Region|

    As `line()`, but the region includes the trailing newline character, if
    any.


*view.lines*(region)
  Returns: [|Region|]

    Returns a list of lines (in sorted order) intersecting the `region`.


*view.split_by_newlines*(region)
  Returns: [|Region|]

    Splits the `region` up such that each region returned exists on exactly one
    line.


*view.word*(point)
  Returns: |Region|

    Returns the word that contains the `point`.


*_none:view.word*(region)
  Returns: |Region|

    Returns a modified copy of `region` such that it starts at the beginning of
    a word, and ends at the end of a word. Note that it may span several words.


*view.classify*(point)
  Returns: int

    Classifies `point`, returning a bitwise OR of zero or more of these flags:

      * `sublime.CLASS_WORD_START`
      * `sublime.CLASS_WORD_END`
      * `sublime.CLASS_PUNCTUATION_START`
      * `sublime.CLASS_PUNCTUATION_END`
      * `sublime.CLASS_SUB_WORD_START`
      * `sublime.CLASS_SUB_WORD_END`
      * `sublime.CLASS_LINE_START`
      * `sublime.CLASS_LINE_END`
      * `sublime.CLASS_EMPTY_LINE`


*view.find_by_class*(point, forward, classes, <separators>)
  Returns: |Region|

    Finds the next location after point that matches the given `classes`. If
    `forward` is `False`, searches backwards instead of forwards. `classes` is
    a bitwise OR of the `sublime.CLASS_XXX` flags. `separators` may be passed
    in, to define what characters should be considered to separate words.


*view.expand_by_class*(point, classes, <separators>)
  Returns: |Region|

    Expands `point` to the left and right, until each side lands on a location
    that matches `classes`. `classes` is a bitwise OR of the
    `sublime.CLASS_XXX` flags. separators may be passed in, to define what
    characters should be considered to separate words.


*_none:view.expand_by_class*(region, classes, <separators>)
  Returns: |Region|

    Expands `region` to the left and right, until each side lands on a location
    that matches `classes`. `classes` is a bitwise OR of the
    `sublime.CLASS_XXX` flags. `separators` may be passed in, to define what
    characters should be considered to separate words.


*view.find*(pattern, start_point, <flags>)
  Returns: |Region|

    Returns the first region matching the regex `pattern`, starting from
    `start_point`, or `None` if it can't be found. The optional `flags`
    parameter may be `sublime.LITERAL`, `sublime.IGNORECASE`, or the two ORed
    together.


*view.find_all*(pattern, <flags>, <format>, <extractions>)
  Returns: [|Region|]

    Returns all (non-overlapping) regions matching the regex `pattern`. The
    optional `flags` parameter may be `sublime.LITERAL`, `sublime.IGNORECASE`,
    or the two ORed together. If a `format` string is given, then all matches
    will be formatted with the formatted string and placed into the extractions
    list.


*view.rowcol*(point)
  Returns: (int, int)

    Calculates the 0-based line and column numbers of the `point`. Column
    numbers are returned as number of Unicode characters.


*view.rowcol_utf8*()  `[>=4050]`
  Returns: (int, int)

    Calculates the 0-based line and column numbers of the `point`. Column
    numbers are returned as UTF-8 code units, i.e. bytes.


*view.rowcol_utf16*()  `[>=4050]`
  Returns: (int, int)

    Calculates the 0-based line and column numbers of the `point`. Column
    numbers are returned as UTF-16 code units, i.e. byte pairs.


*view.text_point*(row, col)
  Returns: int

    Calculates the character offset of the given, 0-based, `row` and `col`.
    `col` is interpreted as the number of Unicode characters to advance past
    the beginning of the row.


*view.text_point_utf8*()  `[>=4050]`
  Returns: (int, int)

    Calculates the character offset of the given, 0-based, `row` and `col`.
    `col` is interpreted as the number of UTF-8 code units, i.e. bytes, to
    advance past the beginning of the row.


*view.text_point_utf16*()  `[>=4050]`
  Returns: (int, int)

    Calculates the character offset of the given, 0-based, `row` and `col`.
    `col` is interpreted as the number of UTF-16 code units, i.e. byte pairs,
    to advance past the beginning of the row.


*view.assign_syntax*(syntax_file)  `[UNDOCUMENTED]`
  Returns: None

    Changes the syntax used by the view. `syntax_file` should be a name along
    the lines of `Packages/Python/Python.tmLanguage`. To retrieve the current
    syntax, use `view.settings().get('syntax')`.


*view.set_syntax_file*(syntax_file)  `[DEPRECATED]`
  Returns: None

    Changes the syntax used by the view. `syntax_file` should be a name along
    the lines of `Packages/Python/Python.tmLanguage`. To retrieve the current
    syntax, use `view.settings().get('syntax')`.

    This function is deprecated; you should use |:view.set_syntax_file:set_syntax_file| instead.


*view.extract_scope*(point)
  Returns: |Region|

    Returns the extent of the syntax scope name assigned to the character at
    the given `point`.


*view.scope_name*(point)
  Returns: str

    Returns the syntax scope name assigned to the character at the given
    `point`.


*view.match_selector*(point, selector)
  Returns: bool

    Checks the `selector` against the scope at the given `point`, returning a
    bool if they match.


*view.score_selector*(point, selector)
  Returns: int

    Matches the `selector` against the scope at the given `point`, returning a
    score. A score of `0` means no match, above `0` means a match. Different
    selectors may be compared against the same scope: a higher score means the
    selector is a better match for the scope.


*view.find_by_selector*(selector)
  Returns: [|Region|]

    Finds all regions in the file matching the given `selector`, returning them
    as a list.


*view.show*(location, <show_surrounds>)
  Returns: None

    Scroll the view to show the given `location`, which may be a |point|,
    |Region| or |Selection|.


*view.show_at_center*(location)
  Returns: None

    Scroll the view to center on the `location`, which may be a |point| or
    |Region|.


*view.visible_region*()
  Returns: |Region|

    Returns the currently visible area of the view.


*view.viewport_position*()
  Returns: |vector|

    Returns the offset of the viewport in layout coordinates.


*view.set_viewport_position*(vector, <animate>)
  Returns: None

    Scrolls the viewport to the given layout position.


*view.viewport_extent*()
  Returns: |vector|

    Returns the width and height of the viewport.


*view.layout_extent*()
  Returns: |vector|

    Returns the width and height of the layout.


*view.text_to_layout*(point)
  Returns: |vector|

    Converts a text point to a layout position


*view.text_to_window*(point)
  Returns: |vector|

    Converts a text point to a window position


*view.layout_to_text*(vector)
  Returns: |point|

    Converts a layout position to a text point


*view.layout_to_window*(vector)
  Returns: |vector|

    Converts a layout position to a window position


*view.window_to_layout*(vector)
  Returns: |vector|

    Converts a window position to a layout position


*view.window_to_text*(vector)
  Returns: |point|

    Converts a window position to a text point


*view.line_height*()
  Returns: |dip|

    Returns the light height used in the layout


*view.em_width*()
  Returns: |dip|

    Returns the typical character width used in the layout


*view.add_regions*(key, [regions], <scope>, <icon>, <flags>, <annotations>,
                   <annotations_color>, <on_navigate>, <on_close>) []
  Returns: None

    +--------------------------------------------------------------------------+
    | Some capabilities and arguments of this API method depend on the version |
    | of Sublime Text being used; see below for details.                       |
    +--------------------------------------------------------------------------+

    Adds visual indicators to regions of text in the view. Indicators include
    icons in the gutter, underlines under the text, borders around the text and
    annotations. Annotations are drawn aligned to the right-hand edge of the
    view and may contain HTML markup.

      * `key`
        A unicode string identifying the collection of regions. If a set of
        regions already exists with the same key, they will be overwritten.

      * `scope`
        An optional unicode string used to source a color to draw the `regions`
        in. The `scope` is matched against the color scheme. Examples include:
        `"invalid"` and `"string"`. See |Scope Naming| for a list of common
        scopes. If the `scope` is empty, the `regions` won't be drawn.

        Also supports the following pseudo-scopes, to allow picking the closest
        color from the user‘s color scheme:  `[>=3148]`

          * `"region.redish"`
          * `"region.orangish"`
          * `"region.yellowish"`
          * `"region.greenish"`
          * `"region.cyanish"`
          * `"region.bluish"`
          * `"region.purplish"`
          * `"region.pinkish"`

      * `icon`
        An optional unicode string specifying an icon to draw in the gutter
        next to each region. The `icon` will be tinted using the color
        associated with the `scope`. Standard icon names are `"dot"`,
        `"circle"` and `"bookmark"`. The `icon` may also be a full
        package-relative path, such as `"Packages/Theme - Default/dot.png"`.

      * `flags`
        An optional bitwise combination of zero or more of:

            * `sublime.DRAW_EMPTY`
              Draw empty regions with a vertical bar. By default, they aren't
              drawn at all.

            * `sublime.HIDE_ON_MINIMAP`
              Don't show the regions on the minimap.

            * `sublime.DRAW_EMPTY_AS_OVERWRITE`
              Draw empty regions with a horizontal bar instead of a vertical
              one.

            * `sublime.DRAW_NO_FILL`
              Disable filling the regions, leaving only the outline.

            * `sublime.DRAW_NO_OUTLINE`
              Disable drawing the outline of the regions.

            * `sublime.DRAW_SOLID_UNDERLINE`
              Draw a solid underline below the regions.

            * `sublime.DRAW_STIPPLED_UNDERLINE`
              Draw a stippled underline below the regions.

            * `sublime.DRAW_SQUIGGLY_UNDERLINE`
              Draw a squiggly underline below the regions.

            * `sublime.PERSISTENT`
              Save the regions in the session.

            * `sublime.HIDDEN`
              Don't draw the regions.

            The underline styles are exclusive, either zero or one of them should be
            given. If using an underline, `sublime.DRAW_NO_FILL` and
            `sublime.DRAW_NO_OUTLINE` should generally be passed in.

      * `annotations`  `[>=4050]`
        An optional collection of unicode strings containing HTML documents to
        display along the right-hand edge of the view. There should be the same
        number of `annotations` as regions. See |:minihtml:minihtml Reference| for
        supported HTML.

      * `annotations_color`  `[>=4050]`
        A optional unicode string of the CSS color to use when drawing the left
        border of the annotation. See |:minihtml colors:minihtml Reference: Colors| for
        supported color formats.

      * `on_navigate`  `[>=4050]`
        A callback that will be passed the `href` when a link in an annotation
        is clicked.

      * `on_close`  `[>=4050]`
        A callback that will be called when the annotations are closed.


*view.get_regions*(key)
  Returns: [|Region|]

    Return the regions associated with the given `key`, if any


*view.erase_regions*(key)
  Returns: None

    Removed the named regions


*view.add_phantom*(key)  `[UNDOCUMENTED]`
  Returns: ???

    This API endpoint is used internally by |PhantomSet| to manage |:phantom:phantoms|
    in the current view. You should use that class rather than this method.


*view.erase_phantoms*(key)  `[UNDOCUMENTED]`
  Returns: ???

    This API endpoint is used internally by |PhantomSet| to manage |:phantom:phantoms|
    in the current view. You should use that class rather than this method.


*view.erase_phantom_by_id*(id)  `[UNDOCUMENTED]`
  Returns: ???

    This API endpoint is used internally by |PhantomSet| to manage |:phantom:phantoms|
    in the current view. You should use that class rather than this method.


*view.query_phantom*(id)  `[UNDOCUMENTED]`
  Returns: ???

    This API endpoint is used internally by |PhantomSet| to manage |:phantom:phantoms|
    in the current view. You should use that class rather than this method.


*view.query_phantoms*(ids)  `[UNDOCUMENTED]`
  Returns: ???

    This API endpoint is used internally by |PhantomSet| to manage |:phantom:phantoms|
    in the current view. You should use that class rather than this method.


*view.set_status*(key, value)
  Returns: None

    Adds the status `key` to the view. The `value` will be displayed in the
    status bar, in a comma separated list of all status values, ordered by key.
    Setting the `value` to the empty string will clear the status.


*view.get_status*(key)
  Returns: str

    Returns the previously assigned value associated with the `key`, if any.


*view.erase_status*(key)
  Returns: None

    Clears the named status.


*view.command_history*(index, <modifying_only>)
  Returns: (str, dict, int)

    Returns the command name, command arguments, and repeat count for the given
    history entry, as stored in the undo / redo stack.

    Index `0` corresponds to the most recent command, `-1` the command before
    that, and so on. Positive values for index indicate to look in the redo
    stack for commands. If the undo / redo history doesn't extend far enough,
    then `(None, None, 0)` will be returned.

    Setting `modifying_only` to `True` (the default is `False`) will only
    return entries that modified the buffer.


*view.indexed_symbol*()  `[UNDOCUMENTED]`
  Returns: [|symbolref|]

    Returns a list of all of the indexed symbols in the current view, along
    with the location where the symbol is defined in the view.

    As the name suggests, this lists only `indexed` symbols; that is, symbols
    for which `showInIndexedSymbolList` is set to `1` in a `tmPreferences`
    meta file.


*view.indexed_references*()  `[UNDOCUMENTED]`
  Returns: [|symbolref|]

    Returns a list of all of the places where an indexed symbol is referenced
    in the current view, along with the location where the reference to the
    symbol occurs. The same symbol may appear in the list more than once if it
    is referenced more than once.

    As the name suggests, this lists only references to `indexed` symbols; that
    is, symbols for which `showInIndexedSymbolList` is set to `1` in a
    `tmPreferences` meta file.


*view.extract_completions*(prefix, <tp=-1>)  `[UNDOCUMENTED]`
  Returns: [str]

    Return a list of all completions from the current view that match the given
    `prefix` string.


*view.find_all_results*()  `[UNDOCUMENTED]`
  Returns: [|resultref|]

    Return a list of all matches found as a result of applying the
    `result_file_regex` and `line_file_regex` settings to the view. These
    settings correspond to the |SublimeBuild::file_regex| and |SublimeBuild::line_regex| settings in a
    |SublimeBuild:index.txt:sublime-build| file.

    The list of returned items contains the absolute filename of the filename
    portion of the match as well as the row and column portions, if they
    matched.


*view.find_all_results_with_text*()  `[UNDOCUMENTED]`
  Returns: [|resultref|]

    This operates as |::find_all_results| with the exception that the returned
    list of results also includes the "message" portion of the result match
    (e.g. the error message associated with an error in a build system).


*view.change_count*()
  Returns: int

    Returns the current change count. Each time the buffer is modified, the
    change count is incremented. The change count can be used to determine if
    the buffer has changed since the last it was inspected.


*view.change_id*()  `[>=4069]`
  Returns: (int, int, int)

    Returns a 3-element tuple that can be passed to |:transform_region_from:transform_region_from()|
    to obtain a region equivalent to a region of the `View` in the past. This
    is primarily useful for plugins providing text modification that must
    operate in an asynchronous fashion and must be able to handle the view
    contents changing between the request and response.


*view.transform_region_from*(region, change_id)  `[>=4069]`
  Returns: |Region|

    Transforms a region from a previous point in time to an equivalent region
    in the current state of the `View`. The `change_id` must have been obtained
    from |:change_id:change_id()| at the point in time the region is from.


*view.fold*([regions])
  Returns: bool

    Folds the given `regions`, returning `False` if they were already folded


*_none:view.fold*(region)
  Returns: bool

    Folds the given `region`, returning `False` if it was already folded


*view.unfold*(region)
  Returns: [|Region|]

    Unfolds all text in the `region`, returning the unfolded regions


*_none:view.unfold*([regions])
  Returns: [|Region|]

    Unfolds all text in the `regions`, returning the unfolded regions


*view.is_folded*(region)  `[UNDOCUMENTED]`
  Returns: bool

    Determines if the `region` provided is currently folded or not. The region
    must be entirely folded in order for `True` to be returned.


*view.folded_regions*()  `[UNDOCUMENTED]`
  Returns: [|Region|]

    Returns a list of `regions` that are currently folded. The list may be
    empty if no text is currently folded.


*view.indented_region*(point)  `[UNDOCUMENTED]`
  Returns: |Region|

    Returns a `region` that encompasses all lines surrounding the line
    containing the given `point` where the |:view.indentation_level:indentation level| is greater than
    or equal to the indent at the `point`.

    If the level of indent at the given `point` is `0`, the returned region is
    a 0-length region that specifies the start of the line containing the
    point.


*view.indentation_level*(point)  `[UNDOCUMENTED]`
  Returns: int

    Returns the level of indentation at the provided point. This is `0` at the
    margin, `1` for one level of indentation, etc.


*view.encoding*()
  Returns: str

    Returns the encoding currently associated with the file


*view.set_encoding*(encoding_name)
  Returns: None

    Applies a new encoding to the file. This encoding will be used the next
    time the file is saved.


*view.line_endings*()
  Returns: str

    Returns the line endings used by the current file.


*view.set_line_endings*(line_ending_name)
  Returns: None

    Sets the line endings that will be applied when next saving.


*view.overwrite_status*()
  Returns: bool

    Returns the overwrite status, which the user normally toggles via the
    insert key.


*view.set_overwrite_status*(enabled)
  Returns: None

    Sets the overwrite status.


*view.symbols*()
  Returns: [(|Region|, str)]

    Extract all the symbols defined in the buffer.


*view.show_popup_menu*(items, on_select, <flags>)
  Returns: None

    Shows a pop up menu at the caret, to select an item in a list. `on_select`
    will be called once, with the index of the selected item. If the pop up
    menu was cancelled, `on_select` will be called with an argument of -1.

    `items` is a list of strings.

    `flags` it currently unused.


*view.show_popup*(content, <flags>, <location>, <max_width>, <max_height>,
                  <on_navigate>, <on_hide>)
  Returns: None

    Shows a popup displaying HTML content.

    `flags` is a bitwise combination of the following:

    * `sublime.COOPERATE_WITH_AUTO_COMPLETE`
      causes the popup to display next to the auto complete menu

    * `sublime.HIDE_ON_MOUSE_MOVE`
      causes the popup to hide when the mouse is moved, clicked or scrolled

    * `sublime.HIDE_ON_MOUSE_MOVE_AWAY`
      causes the popup to hide when the mouse is moved (unless towards the
      popup), or when clicked or scrolled

    * `sublime.KEEP_ON_SELECTION_MODIFIED`  `[>=4057]`
      prevent the popup from hiding when the selection is modified

    The default `location` of `-1` will display the popup at the cursor,
    otherwise a text point should be passed.

    `max_width` and `max_height` set the maximum dimensions for the popup,
    after which scroll bars will be displayed.

    `on_navigate` is a callback that should accept a string contents of the
    `href` attribute on the link the user clicked.

    `on_hide` is called when the popup is hidden.


*view.update_popup*(content)
  Returns: None

    Updates the contents of the currently visible popup.


*view.is_popup_visible*()
  Returns: bool

    Returns if the popup is currently shown.


*view.preserve_auto_complete_on_focus_lost*()  `[>=4073]`
  Returns: None

    Sets the auto complete popup state to be preserved the next time the View
    loses focus. When the View regains focus, the auto complete window will be
    re-shown, with the previously selected entry pre-selected.


*view.hide_popup*()
  Returns: None

    Hides the popup.


*view.is_auto_complete_visible*()
  Returns: bool

    Returns if the auto complete menu is currently visible.


*view.style*()  `[>=3150]`
  Returns: dict

    Returns a `dict` of the global style settings for the view. All colors are
    normalized to the six character hex form with a leading hash, e.g.
    `#ff0000`.


*view.style_for_scope*(scope_name)  `[>=3149]`
  Returns: dict

    Accepts a string scope name and returns a `dict` of style information,
    includes the keys:

      * `"foreground"`
      * `"background"` (only if set)
      * `"bold"`
      * `"italic"`
      * `"glow"`   `[>=4063]`
      * `"source_line"`
      * `"source_column"`
      * `"source_file"`

    The foreground and background colors are normalized to the six character
    hex form with a leading hash, e.g. `#ff0000`.


*view.extract_tokens_with_scopes*(region)  `[UNDOCUMENTED]`  `[>=3172]`
  Returns: [(|Region|, str)]

    Collect a list of all distinct tokens in the provided input region,
    returning back regions that specify the location of each token and a string
    that represents the scope of that token.


*view.set_reference_document*(content)  `[>=3186]`
  Returns: None

    Uses the string `reference` to calculate the initial diff for the
    `incremental diff`


*view.reset_reference_document*(content)  `[>=3190]`
  Returns: None

    Clears the state of the `incremental diff` for the view


--------------------------------------------------------------------------------
Sublime Text Help Copyright © Sublime HQ Pty Ltd            |api_reference.html|