%hyperhelp title="sublime_plugin.EventListener Class" date="2020-05-19"


# eventlistener:EventListener Class
=====================

Note that many of these events are triggered by the buffer underlying the view,
and thus the method is only called once, with the first view as the parameter.

This class is contained in the |sublime_plugin| module.


*EventListener.on_init*([views])  `[>=4050]`
  Returns: None

    Called once with a list of views that were loaded before the EventListener
    was instantiated


*EventListener.on_exit*()  `[>=4050]`
  Returns: None

    Called once after the API has shut down, immediately before the plugin_host
    process exits


*EventListener.on_new*(view)
  Returns: None

    Called when a new buffer is created.


*EventListener.on_new_async*(view)
  Returns: None

    Called when a new buffer is created. Runs in a separate thread, and does
    not block the application.


*EventListener.on_clone*(view)
  Returns: None

    Called when a view is cloned from an existing one.


*EventListener.on_clone_async*(view)
  Returns: None

    Called when a view is cloned from an existing one. Runs in a separate
    thread, and does not block the application.


*EventListener.on_load*(view)
  Returns: None

    Called when the file is finished loading.


*EventListener.on_load_async*(view)
  Returns: None

    Called when the file is finished loading. Runs in a separate thread, and
    does not block the application.


*EventListener.on_reload*(view)  `[>=4050]`
  Returns: None

    Called when the |View| is reloaded.


*EventListener.on_reload_async*(view)  `[>=4050]`
  Returns: None

    Called when the |View| is reloaded. Runs in a separate thread, and does not
    block the application.


*EventListener.on_revert*(view)  `[>=4050]`
  Returns: None

    Called when the |View| is reverted.


*EventListener.on_revert_async*(view)  `[>=4050]`
  Returns: None

    Called when the |View| is reverted. Runs in a separate thread, and does not
    block the application.


*EventListener.on_pre_move*(view)  `[>=4050]`
  Returns: None

    Called right before a view is moved between two windows, passed the |View|
    object.


*EventListener.on_post_move*(view)  `[>=4050]`
  Returns: None

    Called right after a view is moved between two windows, passed the |View|
    object.


*EventListener.on_post_move_async*(view)  `[>=4050]`
  Returns: None

    Called right after a view is moved between two windows, passed the |View|
    object. Runs in a separate thread, and does not block the application.


*EventListener.on_pre_close*(view)
  Returns: None

    Called when a view is about to be closed. The view will still be in the
    window at this point.


*EventListener.on_close*(view)
  Returns: None

    Called when a view is closed (note, there may still be other views into the
    same buffer).


*EventListener.on_pre_save*(view)
  Returns: None

    Called just before a view is saved.


*EventListener.on_pre_save_async*(view)
  Returns: None

    Called just before a view is saved. Runs in a separate thread, and does not
    block the application.


*EventListener.on_post_save*(view)
  Returns: None

    Called after a view has been saved.


*EventListener.on_post_save_async*(view)
  Returns: None

    Called after a view has been saved. Runs in a separate thread, and does not
    block the application.


*EventListener.on_modified*(view)
  Returns: None

    Called after changes have been made to a view.


*EventListener.on_modified_async*(view)
  Returns: None

    Called after changes have been made to a view. Runs in a separate thread,
    and does not block the application.


*EventListener.on_text_changed*(view, [changes])  `[>=4050]`
  Returns: None

    Called once after changes has been made to a view, with detailed
    information about what has changed.

    `changes` is a list of |TextChange| objects.


*EventListener.on_text_changed_async*(view, [changes])  `[>=4050]`
  Returns: None

    Called once after changes has been made to a view, with detailed
    information about what has changed. Runs in a separate thread, and does not
    block the application.

    `changes` is a list of |TextChange| objects.


*EventListener.on_selection_modified*(view)
  Returns: None

    Called after the selection has been modified in a view.


*EventListener.on_selection_modified_async*(view)
  Returns: None

    Called after the selection has been modified in a view. Runs in a separate
    thread, and does not block the application.


*EventListener.on_activated*(view)
  Returns: None

    Called when a view gains input focus.


*EventListener.on_activated_async*(view)
  Returns: None

    Called when a view gains input focus. Runs in a separate thread, and does
    not block the application.


*EventListener.on_deactivated*(view)
  Returns: None

    Called when a view loses input focus.


*EventListener.on_deactivated_async*(view)
  Returns: None

    Called when a view loses input focus. Runs in a separate thread, and does
    not block the application.


*EventListener.on_hover*(view, point, hover_zone)
  Returns: None

    Called when the user's mouse hovers over a view for a short period.

    `point` is the closest point in the view to the mouse location. The mouse
    may not actually be located adjacent based on the value of `hover_zone`:

    * `sublime.HOVER_TEXT`: When the mouse is hovered over text.

    * `sublime.HOVER_GUTTER`: When the mouse is hovered over the gutter.

    * `sublime.HOVER_MARGIN`: When the mouse is hovered in whitespace to the
      right of a line.


*EventListener.on_query_context*(view, key, operator, operand, match_all)
  Returns: bool or None

    Called when determining to trigger a key binding with the given context
    `key`. If the plugin knows how to respond to the context, it should return
    either `True` of `False`. If the context is unknown, it should return
    `None`.

    `operator` is one of:

    * `sublime.OP_EQUAL`: Is the value of the context equal to the operand?

    * `sublime.OP_NOT_EQUAL`: Is the value of the context not equal to the
      operand?

    * `sublime.OP_REGEX_MATCH`: Does the value of the context match the regex
      given in operand?

    * `sublime.OP_NOT_REGEX_MATCH`: Does the value of the context not match the
      regex given in operand?

    * `sublime.OP_REGEX_CONTAINS`: Does the value of the context contain a
      substring matching the regex given in operand?

    * `sublime.OP_NOT_REGEX_CONTAINS`: Does the value of the context not contain
      a substring matching the regex given in operand?

    `match_all` should be used if the context relates to the selections: does
    every selection have to match (`match_all == True`), or is at least one
    matching enough (`match_all == False`)?


*EventListener.on_query_completions*(view, prefix, locations)
  Returns: None, list, tuple or |CompletionList|

    Called whenever completions are to be presented to the user. The `prefix`
    is a unicode string of the text to complete.

    `locations` is a list of |:point:points|. Since this method is called for all
    completions in every view no matter the syntax, `view.match_selector(point,
    relevant_scope)` should be called to determine if the point is relevant.

    The return value must be one of the following formats:

    * `None`: no completions are provided

        ```python
        return None
        ```

    * A list of |completion| values

        ```python
        return [
            ["me1", "method1()"],
            ["me2", "method2()"]
        ]
        ```

    * A 2-element tuple with the first element being a list of |completion|
      values, and the second element being flags composed via bitwise OR of:

        * `sublime.INHIBIT_WORD_COMPLETIONS`: prevent Sublime Text from showing
          completions based on the contents of the view

        * `sublime.INHIBIT_EXPLICIT_COMPLETIONS`: prevent Sublime Text from
          showing completions based on `.sublime-completions` files

        * `sublime.DYNAMIC_COMPLETIONS`:  `[>=4057]`
          if completions should be re-queried as the user types

        * `sublime.INHIBIT_REORDER`  `[>=4074]`
            prevent Sublime Text from changing the completion order

          ```python
          return (
              [
                  ["me1", "method1()"],
                  ["me2", "method2()"]
              ],
              sublime.INHIBIT_WORD_COMPLETIONS |
              sublime.INHIBIT_EXPLICIT_COMPLETIONS
          )
          ```

    * A |CompletionList| object  `[>=4050]`

        ```python
        cl = sublime.CompletionList(flags=sublime.INHIBIT_WORD_COMPLETIONS)
        start_background_fetch(cl)
        return cl
        ```


*EventListener.on_text_command*(view, command_name, args)
  Returns: (str, dict)

    Called when a text command is issued. The listener may return a `(command,
    arguments)` tuple to rewrite the command, or `None` to run the command
    unmodified.


*EventListener.on_window_command*(window, command_name, args)
  Returns: (str, dict)

    Called when a window command is issued. The listener may return a
    `(command, arguments)` tuple to rewrite the command, or `None` to run the
    command unmodified.


*EventListener.on_post_text_command*(view, command_name, args)
  Returns: None

    Called after a text command has been executed.


*EventListener.on_post_window_command*(window, command_name, args)
  Returns: None

    Called after a window command has been executed.


*EventListener.on_new_window*(window)  `[>=4050]`
  Returns: None

    Called when a window is created, passed the |Window| object.


*EventListener.on_new_window_async*(window)  `[>=4050]`
  Returns: None

    Called when a window is created, passed the |Window| object. Runs in a
    separate thread, and does not block the application.


*EventListener.on_pre_close_window*(window)  `[>=4050]`
  Returns: None

    Called right before a window is closed, passed the |Window| object.


*EventListener.on_new_project*(window)  `[>=4050]`
  Returns: None

    Called right after a new project is created, passed the |Window| object.


*EventListener.on_new_project_async*(window)  `[>=4050]`
  Returns: None

    Called right after a new project is created, passed the |Window| object.
    Runs in a separate thread, and does not block the application.


*EventListener.on_load_project*(window)  `[>=4050]`
  Returns: None

    Called right after a new project is loaded, passed the |Window| object.


*EventListener.on_load_project_async*(window)  `[>=4050]`
  Returns: None

    Called right after a new project is loaded, passed the |Window| object.
    Runs in a separate thread, and does not block the application.


*EventListener.on_pre_save_project*(window)  `[>=4050]`
  Returns: None

    Called right before a project is saved, passed the |Window| object.


*EventListener.on_post_save_project*(window)  `[>=4050]`
  Returns: None

    Called right after a project is saved, passed the |Window| object.


*EventListener.on_post_save_project_async*(window)  `[>=4050]`
  Returns: None

    Called right after a project is saved, passed the |Window| object. Runs in
    a separate thread, and does not block the application.


*EventListener.on_pre_close_project*(window)  `[>=4050]`
  Returns: None

    Called right before a project is closed, passed the |Window| object.


--------------------------------------------------------------------------------
Sublime Text Help Copyright © Sublime HQ Pty Ltd            |api_reference.html|