%hyperhelp title="sublime.Window Class" date="2019-03-31"


# window:Window Class
==============

Represents a Sublime Text window.

This class is contained in the |sublime| module.


*window.id*()
  Returns: int

    Returns a number that uniquely identifies this window.


*window.new_file*(<flags>, <syntax>)
  Returns: |View|

    Creates a new file. The returned view will be empty, and its `is_loaded()`
    method will return `True`.

    The optional `flags` parameter may be `sublime.TRANSIENT` to create the new
    view as a transient view.

    The optional `syntax` argument applies a syntax to the newly created view;
    it takes an argument as per the `syntax` setting.

      NOTE: The `flags` and `syntax` arguments are `[UNDOCUMENTED]`.


*window.open_file*(file_name, <flags>, <group=-1>)
  Returns: |View|

    Opens the named file, and returns the corresponding view. If the file is
    already opened, it will be brought to the front. Note that as file loading
    is asynchronous, operations on the returned view won't be possible until
    its `is_loading()` method returns `False`.

    The file will be opened into the provided `group`, which will be the
    currently active group if `group` is -1.

    The optional `flags` parameter is a bitwise combination of:

    * `sublime.ENCODED_POSITION`: Indicates the file_name should be searched
      for   a `:row` or `:row:col` suffix

    * `sublime.TRANSIENT`: Open the file as a preview only: it won't have a tab
      assigned it until modified

    * `sublime.FORCE_GROUP`: Don't select the file if it's opened in a
      different group.

      NOTE: The `group` argument and the `FORCE_GROUP` value for `flags` are
           `[UNDOCUMENTED]`.


*window.find_open_file*(file_name)
  Returns |View|

    Finds the named file in the list of open files, and returns the
    corresponding View, or `None` if no such file is open.


*window.active_sheet*()
  Returns: |Sheet|

    Returns the currently focused sheet.


*window.active_view*()
  Returns: |View|

    Returns the currently edited view.


*window.active_sheet_in_group*(group)
  Returns: |Sheet|

    Returns the currently focused sheet in the given `group`.


*window.active_view_in_group*(group)
  Returns: |View|

    Returns the currently edited view in the given `group`.


*window.transient_sheet_in_group*(group)  `[UNDOCUMENTED]`
    Returns: ????

        ????


*window.transient_view_in_group*(group)  `[UNDOCUMENTED]`
    Returns: ????

        ????


*window.sheets*()
  Returns: [|Sheet|]

    Returns all open sheets in the window.


*window.sheets_in_group*(group)
  Returns: [|Sheet|]

    Returns all open sheets in the given `group`.


*window.views*()
  Returns: [|View|]

    Returns all open views in the window.


*window.views_in_group*(group)
  Returns: [|View|]

    Returns all open views in the given `group`.


*window.num_groups*()
  Returns: int

    Returns the number of view groups in the window.


*window.active_group*()
  Returns: int

    Returns the index of the currently selected group.


*window.focus_group*(group)
  Returns: None

    Makes the given `group` active.


*window.focus_sheet*(sheet)
  Returns: None

    Switches to the given `sheet`.


*window.focus_view*(view)
  Returns: None

    Switches to the given `view`.


*window.get_sheet_index*(sheet)
  Returns: (int, int)

    Returns the group, and index within the group of the `sheet`. Returns `-1`
    if not found.


*window.set_sheet_index*(sheet, group, index)
  Returns:  None

    Moves the `sheet` to the given `group` and `index`.


*window.get_view_index*(view)
  Returns: (int, int)

    Returns the group, and index within the group of the `view`. Returns `-1`
    if not found.


*window.set_view_index*(view, group, index)
  Returns: None

    Moves the `view` to the given `group` and `index`.


*window.layout*()  `[UNDOCUMENTED]`
  Returns: dict

    Returns a dictionary with keys `rows`, `colls` and `cells` which describes
    the current layout of the window.


*window.get_layout*()  `[UNDOCUMENTED]`  `[DEPRECATED]`
  Returns: dict

    Returns the window layout. This is deprecated, use |:window.layout:layout()| instead.


*window.set_layout*(layout)  `[UNDOCUMENTED]`
  Returns: None

    Alter the layout of the window based on the passed in `layout` dictionary,
    which should be in the same form as returned from |:window.layout:layout()|.


*window.status_message*(msg)
  Returns: None

    Show a message in the status bar.


*window.is_menu_visible*()
  Returns: bool

    Returns `True` if the menu is visible.


*window.set_menu_visible*(flag)
  Returns: None

    Controls if the menu is visible.


*window.is_sidebar_visible*()
  Returns: bool

    Returns `True` if the sidebar will be shown when contents are available.


*window.set_sidebar_visible*(flag)
  Returns: None

    Sets the sidebar to be shown or hidden when contents are available.


*window.get_tabs_visible*()
  Returns: bool

    Returns `True` if tabs will be shown for open files.


*window.set_tabs_visible*(flag)
  Returns: None

    Controls if tabs will be shown for open files.


*window.is_minimap_visible*()
  Returns: bool

    Returns `True` if the minimap is enabled.


*window.set_minimap_visible*(flag)
  Returns: None

    Controls the visibility of the minimap.


*window.is_status_bar_visible*()
  Returns: bool

    Returns `True` if the status bar will be shown.


*window.set_status_bar_visible*(flag)
  Returns: None

    Controls the visibility of the status bar.


*window.settings*()  `[UNDOCUMENTED]`
  Returns: |Settings|

    Returns a per-window settings object. The contents of these settings are
    persisted in the session.


*window.template_settings*()  `[UNDOCUMENTED]`
  Returns: |Settings|

    Returns a per-windows settings object. The contents of these settings are
    persisted in the session, and duplicated into new windows.


*window.folders*()
  Returns: [str]

    Returns a list of the currently open folders.


*window.project_file_name*()
  Returns: str

    Returns name of the currently opened project file, if any.


*window.project_data*()
  Returns: dict

    Returns the project data associated with the current window. The data is in
    the same format as the contents of a `.sublime-project` file.


*window.set_project_data*(data)
  Returns: None

    Updates the project data associated with the current window. If the window
    is associated with a `.sublime-project` file, the project file will be
    updated on disk, otherwise the window will store the data internally.


*window.run_command*(cmd, <args>)
  Returns: None

    Runs the named |WindowCommand| with the (optional) given `args`. This
    method is able to run any sort of command, dispatching the command via
    input focus.


*window.show_quick_panel*(items, on_select, <flags>, <selected_index>,
                          <on_highlight>)
  Returns: None

    Shows a quick panel, to select an item in a list. `on_select` will be
    called once, with the index of the selected item. If the quick panel was
    cancelled, `on_select` will be called with an argument of -1.

    `items` may be a list of strings, or a list of string lists. In the latter
    case, each entry in the quick panel will show multiple rows.

    `flags` is a bitwise OR of `sublime.MONOSPACE_FONT` and
    `sublime.KEEP_OPEN_ON_FOCUS_LOST`

    `on_highlight`, if given, will be called every time the highlighted item
    in the quick panel is changed.


*window.show_input_panel*(caption, initial_text, on_done, on_change, on_cancel)
  Returns: |View|

    Shows the input panel, to collect a line of input from the user. `on_done`
    and `on_change`, if not `None`, should both be functions that expect a
    single string argument. `on_cancel` should be a function that expects no
    arguments. The view used for the input widget is returned.


*window.create_output_panel*(name, <unlisted>)
  Returns: |View|

    Returns the view associated with the named output panel, creating it if
    required. The output panel can be shown by running the `show_panel` window
    command, with the `panel` argument set to the name with an `"output."`
    prefix.

    The optional `unlisted` parameter is a boolean to control if the output
    panel should be listed in the panel switcher.


*window.get_output_panel*(name)  `[UNDOCUMENTED]`  `[DEPRECATED]`
  Returns: |View|

    Returns the view associaTed with the named output panel. This method is
    deprecated; use |:window.create_output_panel:create_output_panel()| instead.


*window.find_output_panel*(name)
  Returns: |View| or None

    Returns the view associated with the named output panel, or `None` if the
    output panel does not exist.


*window.destroy_output_panel*(name)
  Returns: None

    Destroys the named output panel, hiding it if currently open.


*window.active_panel*()
  Returns: str or None

    Returns the name of the currently open panel, or `None` if no panel is
    open. Will return built-in panel names (e.g. `"console"`, `"find"`, etc) in
    addition to output panels.


*window.panels*()
  Returns: [str]

    Returns a list of the names of all panels that have not been marked as
    unlisted. Includes certain built-in panels in addition to output panels.


*window.lookup_symbol_in_index*(symbol)
  Returns: [|location|]

    Returns all locations where the symbol is defined across files in the
    current project.


*window.lookup_symbol_in_open_files*(symbol)
  Returns: [|location|]

    Returns all locations where the symbol is defined across open files.


*window.lookup_references_in_index*(symbol)  `[UNDOCUMENTED]`
  Returns: [|location|]

    Returns all locations where the symbol is referenced across files in the
    current project.


*window.lookup_references_in_open_files*(symbol)  `[UNDOCUMENTED]`
  Returns: [|location|]

    Returns all locations where the symbol is referenced across open files.


*window.extract_variables*()
  Returns: dict

    Returns a dictionary of strings populated with contextual keys:

    `packages`, `platform`, `file`, `file_path`, `file_name`, `file_base_name`,
    `file_extension`, `folder`, `project`, `project_path`, `project_name`,
    `project_base_name`, `project_extension`. This dict is suitable for passing
    to `sublime.expand_variables()`.


--------------------------------------------------------------------------------
Sublime Text Help Copyright © Sublime HQ Pty Ltd            |api_reference.html|