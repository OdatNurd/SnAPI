%hyperhelp title="sublime Module" date="2020-07-28"


# sublime:sublime Module
================

In addition to the following module functions, the `sublime` module contains
the following classes and data types:

    |Sheet|
    |View|
    |Selection|
    |Region|
    |Phantom|
    |PhantomSet|
    |Edit|
    |TextChange|         `[>=4050]`
    |HistoricPosition|   `[>=4050]`
    |CompletionItem|     `[>=4050]`
    |completion_kind|    `[>=4050]`
    |CompletionList|     `[>=4050]`
    |Window|
    |Settings|


*sublime.set_timeout*(callback, delay=0)
  Returns: None

    Runs the callback in the main thread after the given `delay` (in
    milliseconds). Callbacks with an equal delay will be run in the order they
    were added.


*sublime.set_timeout_async*(callback, delay=0)
  Returns: None

    Runs the callback on an alternate thread after the given `delay` (in
    milliseconds).


*sublime.error_message*(msg)
  Returns: None

    Displays an error dialog to the user.


*sublime.message_dialog*(string)
  Returns: None

    Displays a message dialog to the user.


*sublime.ok_cancel_dialog*(msg, <ok_title="">)
  Returns: bool

    Displays an ok / cancel question dialog to the user. If `ok_title` is
    provided, this may be used as the text on the ok button. Returns `True` if
    the user presses the ok button.


*sublime.yes_no_cancel_dialog*(msg, <yes_title="">, <no_title="">)
  Returns: int

    Displays a yes / no / cancel question dialog to the user. If `yes_title`
    and/or `no_title` are provided, they will be used as the text on the
    corresponding buttons on some platforms. Returns `sublime.DIALOG_YES`,
    `sublime.DIALOG_NO` or `sublime.DIALOG_CANCEL`.


*sublime.open_dialog*(callback, <file_types>, <directory>,   `[>=4075]`
                      <multi_select>, <allow_folders>)
    Returns: None

      Presents the user with a file dialog for the purpose of opening a file,
      and passes the resulting file path to `callback`.

      * `callback`
        A callback to accept the result of the user’s choice. If the user
        cancels the dialog, `None` will be passed. If a file is selected, a
        `str` containing the path will be passed. If the parameter
        `multi_select` is `True`, a `list` of `str` file paths will be passed.

      * `file_types`
        A specification of allowable file types. This parameter should be a
        `list` containing 2-element `tuples`:

          * A `str` containing a description
          * A `list` of `str` with valid file extensions

          Example:

          ```python
          [
            ('Python source files', ['py', 'py3', 'pyw']),
            ('C source files', ['c', 'h'])
          ]
          ```

      * `directory`
        A `str` of the directory to open the file dialog to. If not specified,
        will use the directory of the current view.

      * `multi_select*`
        A `bool` to indicate that the user should be allowed to select multiple
        files

      * `allow_folders`
        A `bool` to indicate that the user should be allowed to select folders


*sublime.save_dialog*(callback, <file_types>, <directory>,   `[>=4075]`
                      <name>, <extension>)
    Returns: None

      Presents the user with a file dialog for the purpose of saving a file,
      and passes the result to `callback`.

      * `callback`
        A callback to accept the result of the user’s choice. If the user
        cancels the dialog, `None` will be passed. If a file is selected, a
        `str` containing the path will be passed.

      * `file_types`
        A specification of allowable file types. This parameter should be a
        `list` containing 2-element `tuples`:

          * A `str` containing a description
          * A `list` of `str` with valid file extensions

          Example:

          ```python
          [
            ('Python source files', ['py', 'py3', 'pyw']),
            ('C source files', ['c', 'h'])
          ]
          ```

      * `directory`
        A `str` with the default file name

      * `name*`
        A `bool` to indicate that the user should be allowed to select multiple
        files

      * `extension`
        A `str` containing the default file extension


*sublime.select_folder_dialog*(callback, <directory>, <multi_select>) `[>=4075]`
    Returns: None

      Presents the user with a file dialog for the purpose of selecting a
      folder, and passes the resulting file path to `callback`.

      * `callback`
        A callback to accept the result of the user’s choice. If the user
        cancels the dialog, `None` will be passed. If a folder is selected, a
        `str` containing the path will be passed. If the parameter
        `multi_select` is `True`, a `list` of `str` folder paths will be
        passed.

      * `directory`
        A `str` of the directory to open the file dialog to. If not specified,
        will use the directory of the current view.

      * `multi_select*`
        A `bool` to indicate that the user should be allowed to select multiple
        files


*sublime.status_message*()  `[UNDOCUMENTED]`  `[DEPRECATED]`
  Returns: None

    Show a message in the status bar. This is an old API that has been
    replaced by |:window.status_message:window.status_message()|.


*sublime.load_resource*(name)
  Returns: str

    Loads the given resource. The `name` should be in the format
    `Packages/Default/Main.sublime-menu`.


*sublime.load_binary_resource*(name)
  Returns: bytes

    Loads the given resource. The name should be in the format
    `Packages/Default/Main.sublime-menu`.


*sublime.find_resources*(pattern)
  Returns: [str]

    Finds resources whose file name matches the given `pattern`.


*sublime.list_syntaxes*()  `[>=4050]`
  Returns: [dict]

    Returns a list of all available syntaxes. Each dict will have the keys
    `"path"`, `"name"`, `"hidden"` and `"scope"`.


*sublime.find_syntax*(fname, <first_line>)  `[>=4050]`
  Returns: str or None

    Returns the path to the syntax that will be used when opening a file with
    the name `fname`. The `first_line` of file contents may also be provided if
    available.


*sublime.encode_value*(value, <pretty>)
  Returns: str

    Encode a JSON compatible `value` into a string representation. If `pretty`
    is set to `True`, the string will include newlines and indentation.


*sublime.decode_value*(data)
  Returns: |value|

    Decodes a JSON string into an object. If the `string` is invalid, a
    `ValueError` will be thrown.


*sublime.expand_variables*(value, variables)
  Returns: |value|

    Expands any variables in the string `value` using the variables defined in
    the dictionary `variables`. `value` may also be a `list` or `dict`, in
    which case the structure will be recursively expanded. Strings should use
    snippet syntax, for example:
        `expand_variables("Hello, ${name}", {"name": "Foo"})`


*sublime.load_settings*(base_name)
  Returns: |Settings|

    Loads the named settings. The name should include a file name and
    extension, but not a path. The packages will be searched for files matching
    the `base_name`, and the results will be collated into the settings object.
    Subsequent calls to `load_settings()` with the `base_name` will return the
    same object, and not load the settings from disk again.


*sublime.save_settings*(base_name)
  Returns: None

    Flushes any in-memory changes to the named settings object to disk.


*sublime.windows*()
  Returns: [|Window|]

    Returns a list of all the open windows.


*sublime.active_window*()
  Returns: |Window|

    Returns the most recently used window.


*sublime.packages_path*()
  Returns: str

    Returns the path where all the user's loose packages are located.


*sublime.installed_packages_path*()
  Returns: str

    Returns the path where all the user's `.sublime-package` files are
    located.


*sublime.executable_path*()  `[UNDOCUMENTED]`
  Returns: str

    Returns the full path to the Sublime Text executable, including the name
    of the executable itself.


*sublime.executable_hash*()  `[UNDOCUMENTED]`
  Returns: tuple

    Returns a 3-tuple that provides the current `version`, `platform`,
    `architecture` and a hash value.

    Example:
        `('3180', 'linux_x64', '6b76a7235661436c212bc5342d190146')`


*sublime.cache_path*()
  Returns: str

    Returns the path where Sublime Text stores cache files.


*sublime.get_clipboard*(<size_limit>)
  Returns: str

    Returns the contents of the clipboard. `size_limit` is there to protect
    against unnecessarily large data, defaults to 16,777,216 characters


*sublime.set_clipboard*(text)
  Returns: None

    Sets the contents of the clipboard.


*sublime.score_selector*(scope_name, selector)
  Returns: int

    Matches the `selector` against the given scope, returning a score. A score
    of `0` means no match, above `0` means a match. Different selectors may be
    compared against the same scope: a higher score means the selector is a
    better match for the scope.


*sublime.run_command*(cmd, <args>)
  Returns: None

    Runs the named |ApplicationCommand| with the (optional) given `args`.


*sublime.log_commands*(flag)
  Returns: None

    Controls command logging. If enabled, all commands run from key bindings
    and the menu will be logged to the console.


*sublime.log_input*(flag)
  Returns: None

    Controls input logging. If enabled, all key presses will be logged to the
    console.


*sublime.log_result_regex*(flag)
  Returns: None

    Controls result regex logging. This is useful for debugging regular
    expressions used in build systems.


*sublime.log_indexing*(flag)  `[UNDOCUMENTED]`  `[DEPRECATED]`
  Returns: None

    Controls logging of indexing operations. If enabled, relevant information
    related to indexing will be logged to the console.

    This method is deprecated in favor of the `Help > Indexing Status` menu
    item, which displays all indexing logs for the current invocation of
    Sublime Text and also includes more information.


*sublime.log_build_systems*(flag)  `[UNDOCUMENTED]`
  Returns: None

    Controls logging of build system selection. If enabled, information on how
    Sublime is selecting the appropriate build system for the current situation
    is logged to the console.


*sublime.log_control_tree*(flag)
  Returns: None

    When enabled, clicking with <Ctrl+Alt> will log the control tree under the
    mouse to the console.


*sublime.version*()
  Returns: str

    Returns the version number


*sublime.platform*()
  Returns: str

    Returns the platform, which may be `"osx"`, `"linux"` or `"windows"`


*sublime.arch*()
  Returns: str

    Returns the CPU architecture, which may be `"x32"` or `"x64"`


*sublime.channel*()  `[UNDOCUMENTED]`
  Returns: str

    Returns the channel that the current version of Sublime is from, which may
    be `"dev"` or `"stable"`.


--------------------------------------------------------------------------------
Sublime Text Help Copyright © Sublime HQ Pty Ltd            |api_reference.html|